#!/bin/bash
#
#	Ciboulette una red social 100% libre, descentralizada y entre pares
#	version 0.3.7 - ailen
#	AGPLv3+ | Licencias de Pares | Creative Commons Atribución-CompartirIgual 3.0 © Ernesto Bazzano (bazza)
#

# eso se usa para correrlo en rc.local
if [ "$1" == "iptables" ]; then
	[ ! "$(id -u)" == "0" ] && echo "Necesitas permiso de root, ejemplo: sudo $0" && exit
	# torifica los DNS (en lo posible)
	iptables -t nat -A OUTPUT -p tcp -d 10.192.0.0/10 -j REDIRECT --to-ports 9040
	exit
fi

if [ "$1" == "adduser" ]; then
	[ ! "$(id -u)" == "0" ] && echo "Necesitas permiso de root, ejemplo: sudo $0 $1 $2 $3" && exit
	[ ! "$2" ] && echo "Necesita un sobrenombre como parametro, ejemplo: sudo $0 $1 sobrenombre clave" && exit

	# ------------------- prosody ---------------------------
	# toma el usuario

	HOST=$(cat /var/lib/tor/ciboulette/hostname)

	[ ! "$HOST" ] && echo 'Error. No se pudo generar la dirección .onion, tal vez tu `/etc/tor/torrc` no este configurado correctamente. Modificar y volver a correr la instalación.' && exit

	# generar una nueva instalación con un certificado copado

	VIRTUAL="Host"
	if [ ! -f /etc/prosody/certs/$HOST.key ]; then
		if [ "$(prosodyctl | grep cert )" ]; then
			prosodyctl cert generate $HOST && VIRTUAL="VirtualHost"
		else
			echo -e "AU\n\n\n\n\n\n\n" | \
			openssl req -new -x509 -days 365 -nodes -out "/etc/prosody/certs/$HOST.crt" -newkey rsa:4096 -keyout "/etc/prosody/certs/$HOST.key"
		fi
	fi

	# guarda el certificado asi no tenemos que aceptarlo mas :D

	cp /etc/prosody/certs/$HOST.crt /etc/ssl/certs/ 2> /dev/null

	# graba el nuevo host de prosody
	echo "$VIRTUAL \"$HOST\"
	ssl = {
	  key = \"/etc/prosody/certs/$HOST.key\";
	  certificate = \"/etc/prosody/certs/$HOST.crt\";
	}" > /etc/prosody/conf.avail/$HOST.cfg.lua
	cp /etc/prosody/conf.avail/$HOST.cfg.lua /etc/prosody/conf.d/$HOST.cfg.lua 2> /dev/null

	# reinicie el servidor de prosody

	prosodyctl stop 2> /dev/null
	prosodyctl start 2> /dev/null

	USUARIO=$2
	read CLAVE
	XMPP="${USUARIO}@${HOST}"
	echo -e "$CLAVE\n$CLAVE\n" | prosodyctl adduser $XMPP $CLAVE 2> /dev/null
	echo "tu cuenta de XMPP ya fue creada $XMPP"
	exit
fi

export NOMBRE="ciboulette"
export CARPETA=~/.${NOMBRE}/
export BLOG="${CARPETA}blog"
export COMPARTIR="${CARPETA}compartir"
export NOVEDADES="${CARPETA}novedades"
export WWW="${CARPETA}www"
# programas
export NB="nb -b $BLOG --template-dir $BLOG/templates"
export RAWDOG="torify rawdog -d $NOVEDADES"
# descarga con un limite de 500k por archivo
[ "$(which wget)" ] && export WGET="torify wget --quota 500k -qO -" || export WGET="torify curl --max-filesize 500000 "

# Renueva la llave gpg en el sitio
# ln -s ~/.pgpkey "$WWW/gpg.asc" &> /dev/null

#---------------------- funciones graficas -----------------
function opciones {
	while getopts t:m: OPCION; do
	        case $OPCION in
	                t) TITULO=${OPTARG}
	                ;;
	                m) MENSAJE=${OPTARG}
	                ;;
	        esac
	done
	# parametros
	N=0
	for T in $(cat /dev/stdin); do
		T=$(echo $T | sed 's/_/\ /g')
		C="$C $N \"$T\""
		N=$(($N+1))
	done
	# genera el menu
	eval "zenity --title \"$TITULO\" --window-icon /usr/share/pixmaps/$NOMBRE.png --text \"$MENSAJE\" --list --height=350 --column \"\" --column \"\" --hide-column 1  --hide-header $C"
}
function error {
	zenity --error --text="$*"
}
function alerta {
	zenity --warning --text="$(cat /dev/stdin)"
}
function clave {
	zenity --title "Clave" --text "Introducir la clave" --entry --entry-text="$*"
}
function url {
	zenity --title "URL" --text "Dirección" --entry --entry-text="$*"
}
function titulo {
	zenity --title "Titulo" --text "$*" --entry
}
function archivo {
	zenity --title "Elije el archivo" --file-selection
}
function archivos {
	echo -e "$(zenity --title "Archivos" --text="Elije los archivos" --file-selection --multiple --separator="\n" \
	|| error "si necesita un archivo" && exit)"
}
function mensaje {
	zenity --title "Mensaje" --text="Escribe el mensaje" --width=450 --height=350 --text-info --editable
}
function mostrar {
	# mensaje de entrada
	MENSAJE=`cat /dev/stdin`
	if [ "$(echo "$MENSAJE" | wc -l )" == "1" ]; then
		zenity --title "Mensaje decifrado" --width=450 --text="$*" --entry --entry-text="$MENSAJE"
	else
		echo "$MENSAJE" | zenity --title "Mensaje decifrado" --text="$*" --width=450 --height=350 --text-info
	fi
	echo "$MENSAJE" | xsel -i
}
function progreso {
	pid=`mktemp -t ${NOMBRE}XXXX`
	zenity --progress --pulsate --auto-close --title "Espere por favor..." --text="$*" & echo $! > $pid
	cat /dev/stdin
	kill `cat $pid`
}
function blogear {
	# nanoblogger construye el blog
	$NB update all
}

function servidor_inicio {
	# inicia el servidor
	servidor_matar
	/usr/sbin/mini-httpd -i /tmp/$NOMBRE.pid -p 4232 -d "$WWW" -T "UTF8" -c "cgi-bin/*" 2> /dev/null
}

function servidor_matar {
	# matar el servidor
	[ -f /tmp/$NOMBRE.pid ] && kill "$(cat /tmp/$NOMBRE.pid)" 2> /dev/null
}

function nodo_agregar {
	# aca se manda cualquiera
	cat /dev/stdin | sed 's/\ /\n/g' | while read URL; do
		# falta poner que si no tiene http:// lo agrege
		URL=$(echo $URL | sed 's/\/$//g')
		[ "$(echo $URL | grep -v "^http")" ] && URL="http://$URL"
		# falta comprobar que no se repita
		echo "feed 3h $URL" >> ${NOVEDADES}/config
	done
	# luego de agregarla actualiza novedades
	nodos_actualizar
	avatares_actualizar
}
function nodo_borrar {
	cat /dev/stdin | sed 's/\ /\n/g' | while read URL; do
		$RAWDOG -r "$URL" 2> /dev/null
	done
}
function nodos_lista {
	$RAWDOG -l 2> /dev/null
}
function nodos_actualizar {
	N=$($RAWDOG -uw 2> /dev/null | cut -d " " -f1) 2> /dev/null
	$NB update articles # Este deberia ser en particular el articulo de novedades
	export DISPLAY=:0
	[ ! "$N" == "0" ] && \
	notify-send -t -1 "Ciboulette" "<a href=\"http://localhost:4232/novedades\">$ID</a>$N mensajes</a>" \
	-i "${BLOG}/images/logo.png"
}
function avatar {
	# favicon
	convert "$@" -strip -resize 16x16 ${CARPETA}favicon.ico
	# Genera el avatar, le guarda el hostname y la gpg
	# metadata
	convert "$@" -strip -resize 128x128 -set url "$(cat ${CARPETA}hostname)" \
	-set llave "$LLAVE" ${CARPETA}avatar.png
	# se pueden sumar muchos mas datos
	# qrencode "$(cat ${CARPETA}hostname)" -o ${CARPETA}qr.png
}
function avatares_actualizar {
	# 1. actualizar avatare
	#  1.1 si no tiene avatar buscar <image>, favicon.ico, primera imagen encontrada
	# 2. que no superen cierta cantidad de bits o tiempo
	# 3. convertirlos a png de 128px y grabarlos con el [hash de tu feed](http://offog.org/git/rawdog/config)
	# Nota: para que no tarde mucho habria que poner procesos en paralelo
	URLHASHS=$(echo $(ciboulette -l | grep "^htt\|..Hash:\ ") | sed 's/http/\nhttp/g; s/..Hash:\ \(.*\)$/ \1/g'| grep -v "^$")
		echo "$URLHASHS" | while read URLHASH; do
		URL=$(echo $URLHASH | sed 's/\ .*$//g')
		BASEURL=$(echo $URL | cut -d "/" -f 3 )
		HASH=$(echo $URLHASH | sed 's/^.*\ //g')
		echo "Descargando avatar de $URL $BASEURL $HASH"
		# Descargas en avatares
		([ "$(echo URL | grep "\.onion")" ] && $WGET "http://${BASEURL}/favicon.{ico,png}" 2> /dev/null || $WGET "${URL}/avatar.png" 2> /dev/null ) \
		| convert -'[128x128]' "${WWW}/avatares/${HASH}.png" 2> /dev/null
		# falta leer el header y ver los avatares

		# Si no puede conseguir el avatar lo genera con QR
		[ ! -f "${WWW}/avatares/${HASH}.png" ] && echo "$URL" | qrencode -o - | convert -  -fill purple -opaque black -transparent white "${WWW}/avatares/${HASH}.png" 2> /dev/null
	done
}

while getopts a:b:n:skdlhiIuwz OPCION; do
	case $OPCION in
        z)
		avatares_actualizar
	;;
        g)
		avatar $@
	;;
        a)
		echo "Escriba el articulo y presione ctrl+D. Para generar otro parrafo use doble enter"
		TITULO="`echo $@ | sed 's/^-a\ //g'`"
		ARTICULO="`cat /dev/stdin`"
		echo "Publicando articulo"
		TMP=$(mktemp -t ${NOMBRE}XXXX)
		$NB --title "$TITULO" --text "$ARTICULO" make-file $TMP/articulo.txt
		$NB import entry $TMP/articulo.txt

        ;;
	w)
		blogear
        ;;
        n)
		echo $@ | nodo_agregar
        ;;
        b)
		echo $@ | nodo_borrar
        ;;
        l)
		nodos_lista
        ;;
        d)
		nodos_actualizar
        ;;
        s)
		servidor_matar
		servidor_inicio
        ;;
        k)
		servidor_matar
        ;;
	u)
		NOMBRE=`basename $0`
        	AUTOR="b4zz4"
		REPO="Ciboulette"
		ZIP="master"
		cd /tmp
		# unificar estas dos lineas
		wget https://github.com/$AUTOR/$REPO/archive/$ZIP.zip -O master.zip
		rm -r $REPO-$ZIP/
		unzip master.zip
		cd $REPO-$ZIP/
		chmod +x $NOMBRE
		./$NOMBRE -i && echo "actualizado"
	;;
	h)
		echo "$(basename $0) $(cat ${CARPETA}hostname)"
		echo
		echo "  -h  esta ayuda"
		echo "  -s  iniciar el servidor"
		echo "  -k  matar el servidor"
		echo "  -u  actualizar el programa"
		echo
		echo "  -a \"Titulo de tu articulo\"		agregar articulo"
		echo "  -n http://nodociboulette.onion	agregar un nodo amigo"
		echo "  -b http://nodociboulette.onion	borrar un nodo"
		echo "  -l lisa de nodos amigos"
		echo "  -d actualizar noticias de otros nodos"
		echo "  -w forzar a actualizar tus noticias"
		echo "  -g /home/usuario/imagen.png		actualiza tu avatare "
		echo "  -z actualiza los avatares de los nodos"
		echo
		echo " adduser sobrenombre	agrega una cuenta de XMPP"
		echo " iptables		resuelve los onion por tor"

		echo
	;;
	i)
		# deshabilita este comando una vez que esta instalado
		[ "$(readlink -f $0 | grep ^/usr/)" ] && exit
		# no debe correrse como root
		[ "$(id -u)" == "0" ] && echo "No correr esto como root" && exit
		# comprueba que tengas sudo
		[ ! "$(which sudo)" ] && echo 'Necesitas instalar el comando `sudo` por lo general para instalarlo en `apt-get install sudo`, lo siento :(' && exit

		# Crea el directorio local y temas
		mkdir -p $CARPETA

		echo "Escribi tu clave de administración para instalar Ciboulette"
		sudo ./instalar || echo "error en la clave"; exit
		./ciboulette -I

		# direccion de tu ciboulette
		echo "http://$(cat /tmp/hostname)" > ${CARPETA}hostname

		;;
	I)

		# backups de tus amigxs
		[ -f "$NOVEDADES/config" ] && FEED="$(cat $NOVEDADES/config | grep "^feed ")"

		# pide permiso
		PWD=$(pwd)

		# nombre del programa
		NOMBRE=`basename $0`


		# ----------------------------- INSTALACION ----------------------------------

		# Crea el directorio local y temas
		mkdir -p $CARPETA
		cp -r base/* "$CARPETA"

		if [ "$XDG_PUBLICSHARE_DIR" ]; then
			ls -s "$XDG_PUBLICSHARE_DIR" "$COMPARTIR"
			echo "Compartiendo la carpeta $XDG_PUBLICSHARE_DIR"
		else
			# crea la carpeta compartir si esta no se puede asociar a la del sistema
			mkdir $COMPARTIR &> /dev/null
		fi

		# si no existe la configuración
		if [ ! -f "~/.nb.conf" ]; then
			# agrega el idioma
			echo "NB_LANG="$(echo $LANG | cut -d'_' -f1)"" > ~/.nb.conf
		fi

		echo "$FEED" >> "$NOVEDADES/config"


		# incio en cada sesion
		mkdir ~/.config/autostart/ &> /dev/null
		cp ${NOMBRE}-s.desktop  ~/.config/autostart/

		# solo para esta version
		[ -d "${CARPETA}md" ] && sh chronicle2nanoblogger

		# la idea de esto es compartir archivos
		# mkdir ~/Ciboulette
		# cd ~/Ciboulette
		# ln -s "$BLOG/data/" Blog/
		# ln -s "$COMPARTIR/" Compartir/
		# ln -s "$NOVEDADES/" Novedades/

		# genera el QR de tu ciboulette
		qrencode "`cat ${CARPETA}hostname`" -o ${CARPETA}qr.png
		# si no tiene avatar agrega uno
		[ ! -f "${CARPETA}/avatar.png" ] && ciboulette -d ciboulette.png

		# inicia el servidor
		$NOMBRE -s &
		echo "Iniciando los archivos de ciboulette, espere por favor..."
		# actualiza las novedades
		$NOMBRE -d &> /dev/null
		# actualiza las paginas
		$NB update articles
		$NB update main
		# verifique si tenes articulos y actualice todo
		(crontab -l | grep -v "# Ciboulette"; echo '*/5  * * * * /usr/local/bin/ciboulette -d &>/dev/null # Ciboulette';) | crontab -
		$NOMBRE -h
		xdg-open http://localhost:4232/articles/ayuda &
	;;
	esac
	exit
done



# -------------------------- Wizard ----------------------------------

# ¿Que queres hacer?
MENU=`echo  "Publicar_un_articulo Cambiar_tu_avatar Modificar_tu_plan Editar_tu_perfil Leer_novedades Agrega_un_nodo_amigo Quitar_un_nodo Generar_una_cuenta_de_chat Iniciar_Ciboulette Matar_Ciboulette Actualizar_el_programa" | opciones -t "Ciboulette" -m "Tu nodo: $(cat ${CARPETA}hostname)"`
case $MENU in
		0 )
			# Publicar articulo
			TITULO="$(titulo "Titulo de tu artículo" || exit)"
			mensaje | ciboulette -a "$TITULO" || exit
		;;
		1 )
			# Imagen del perfil
			$NOMBRE -g "$(archivo "Imagen del perfil")"
			# generar respuesta
			echo "avatar actualizado" | alerta
		;;
		2)
			titulo "¿Cual es tu plan?" > ~/.plan
			echo "plan actualizado" | alerta
			$NOMBRE -d
			$NOMBRE -w
		;;
		3)
			# Configuración del perfil
			xdg-open "${BLOG}/articles/perfil.txt"
			blogear # deberia solo actualizar la pagina de perfil
		;;
		4)
			# Novedades
			xdg-open "http://localhost:4232/articles/novedades/"
		;;
		5)
			# Agregar nodo
			$NOMBRE -n $(url)
		;;
		6)
			# necesita una automatización para el zenity
			$NOMBRE -b $(ciboulette -l | grep "\(Title\|Link\)" \
			| sed 's/^.*:\ //g' \
			| zenity --list --column "Nodo" --column "URL" --hide-header \
			--multiple --print-column 2 --title "Elija los nodos a borrar" --separator " ")
		;;
		7)
			USUARIO=$(echo $USER | titulo "nombre de usuario" || exit)
			# Inicia al servidor
			clave "clave de para tu cuenta" | gksu $NOMBRE adduser $USUARIO
		;;
		8)
			# Inicia al servidor
			$NOMBRE -s
		;;
		9)
			# Mata el servidor
			$NOMBRE -k
		;;
		10)
			# Mata el servidor
			$NOMBRE -u
		;;
esac
